<?xml version="1.0" encoding="UTF-8"?>

<!--
	Build the visu client modules and main application, 
	and put the produced swf files to the "deploy/" directory.
	(produced swf files in "deploy/" are to be deployed to
	the red5 server by the VisuServeur/build.xml script)
-->

<!-- Info: The size of memory available to the JVM may required to be extended for the
           compile tasks. You may need to extend the JVM memory space with the options "-Xms", "-Xmx" and "-XX:MaxPermSize":
           
	       Ex: -Xms768m -Xmx1024m -XX:MaxPermSize=512m

or by setting the following environment variable:

		ANT_OPTS="-Xms768m -Xmx1024m -XX:MaxPermSize=512m"

-->

<project name="Video Learning Client Builder" default="build-and-deploy-all">
 
<loadproperties srcFile="build.properties"/>

   
	<property name="visu.dev.path" location="." />
	
	
	<property name="player.major.version" value="10.1" />
   	<property name="locale" value="en_US" />
	
	<!-- the value for the "debug" compiler option for compc and mxmlc -->
   	<property name="debug" value="true" />

	<!-- True if the compiler should display warnings to the console -->
   	<property name="warnings" value="false" />
	
	<!-- the value for the "debug" compiler option for compc and mxmlc -->
   	<property name="mxmlc.incremental" value="false" />
	
	<!-- the name for bot the final swf file and the mxml application source file -->
   	<property name="webapp.dir"  location="${red5.dir}/webapps/${webapp.name}" />   	
   	   	
	<!-- The FLEX_HOME variable (with this typo) must be set to the flex sdk repository
		 for the compc and mxmlc compilers to run properly-->
   <property name="FLEX_HOME" location="${flex.sdk}"/>
   
	<!-- add flex ant task from adobe sdk-->
   <taskdef resource="flexTasks.tasks" classpath="${flex.sdk}/ant/lib/flexTasks.jar"/>

   <!-- The source folder where vLearning.mxml will be found --> 
   <property name="app.src" location="${visu.dev.path}/VideoLearningApplication/src" />

	<!-- The temporary output folder where to place the swf files before being deployed to the server --> 
   <property name="app.deploy" location="${visu.dev.path}/${deploy.tmp}" />
   
   <!-- The temporary output folder where to place the wrapper files before being deployed to the server --> 
   <property name="app.wrappers" location="${app.deploy}/wrappers" />
	
		<!-- Visu framework related variables -->
   <property name="framework.path" location="${visu.dev.path}/VisuFramework" />
   <property name="framework.src" location="${framework.path}/src" />
   <property name="framework.images" location="${framework.src}/images" />
   <property name="framework.timeLineImages" location="${framework.src}/com/ithaca/timeline/images" />
   <property name="framework.sounds" location="${framework.src}/sounds" />
   <property name="framework.bin" location="${framework.path}/bin" />
   <property name="framework.linkreport" location="${framework.bin}/link-report.xml" />
   <property name="framework.locale" location="${framework.path}/locale" />
	
	<!--  Pathes to third party libraries-->	
   <property name="thirdparty.dir" location="${visu.dev.path}/swc" />
   <property name="lib.mate" value="Mate_08_9.swc" />
   <property name="lib.rmtp" value="rtmp-service-1.0.swc" />
   <property name="lib.as3gettext" value="as3-gettext-0.4.1.swc" />
   <property name="lib.visu" value="VisuFramework.swc" />


	<!--  the name of the visu swf file -->	
	 <property name="vLearning.swf" value="vLearning"/>

	
	<!--  server project path -->	
	<property name="project.server.path"    location="${visu.dev.path}/VideoLearningServer/videoLS/"/>
	<property name="project.server.src"     location="${project.server.path}/src"/>
	<property name="server.tmp.classes"     location="${app.deploy}/tmp"/>
	
	<!--  jar properties -->	
	<property name="jar.name"     value="${webapp.name}"/>
	<property name="jar.dir"     location="${app.deploy}"/>
	<property name="jar.file"    location="${jar.dir}/${jar.name}.jar" />
		
	<!--  Property file -->	
	<property name="file.props.versioninfo.filename"     value="comp-info.properties"/>
	<property name="file.props.versioninfo"     location="${visu.dev.path}/${file.props.versioninfo.filename}"/>


	<!-- Puts the current time in a property file -->
	<target name="compile-info">
		<delete file="${file.props.versioninfo}"/>
		<tstamp>
			<format property="COMPILE_TIME" pattern="dd MMMMM yyyy - HH:mm:ss (Z)" timezone="UTC"/>
		</tstamp>
		<echo message="${COMPILE_TIME}" file="${file.props.versioninfo}"/>
	</target>  
	<!-- Package the visu frameworks classes and resources, and put them
		 into a temporary library named "visu_framework.swc" (located in "./VisuFramework/bin/")
		 that will serve as a library when building visu modules.
	-->
	
	 <!-- 
	 	Build the visu client application, i.e. from "visuclient.mxml" to "visuclient.swf"
	 -->
	   <target name="build-video-learning-client-swf" description="Builds the application swf file"> 
	      <echo>Build VideoLearning</echo>
	      
		<!-- 
			the "link-report" option creates an output xml file (the link report) where
			all classes held in the produced swf file will be indexed. This link report
			is given as input for the compilation of Visu client modules, in order not 
			to include again in the client modules classes that will be accessible at runtime 
			in the main swf file (visuclient.swf).
			
			This is the implementation of the Flex RSL (Runtime Shared Library) mechanism.
			For a complete documentation, see http://help.adobe.com/en_US/flex/using/WS2db454920e96a9e51e63e3d11c0bf69084-7add.html
			
		 -->	
		 
		<!-- timestamp -->
 		<tstamp>
	  		<format 
	  			property="COMPILE_APP_TIME"
	    		pattern="yyyyMMdd-HHmmss"
	          	locale="fr,FR"/>
		</tstamp>
		
		<!-- deleting old app -->
		<delete quiet="true">
			<fileset dir="${app.deploy}" includes="${clientapp.name}*.swf"/>
		</delete>
		
		<!-- name app client with timestamp -->
	   	<!-- clientapp.name.timestamp without ".swf", the wrapper will add "swf" -->
		<property name="clientapp.name.timestamp" value="${clientapp.name}-${COMPILE_APP_TIME}" />
	   	<mxmlc 
	         file="${app.src}/${clientapp.name}.mxml"
	         output="${app.deploy}/${clientapp.name.timestamp}.swf"
	         debug="${debug}"
	         strict="true"  
	         warnings="${warnings}"	
	         incremental="${mxmlc.incremental}"
	         headless-server="true">
	         
	         <!-- will include all files with .css, .as, .mxml extensions -->
	         <source-path path-element="${app.src}"/>
	      	
	      	 <library-path dir="${thirdparty.dir}" append="true">
	      		            <include name="${lib.mate}" />
	      		            <include name="${lib.rmtp}" />
	      		            <include name="${lib.visu}" />
	      		            <include name="${lib.as3gettext}" />
			</library-path>
	      	
		</mxmlc>
	    <!-- do this target with new name app -->
	   	<antcall target="html-wrapper" />
	</target>
	
	<target name="html-wrapper" description="Creates a HTML wrapper and other js files required for the application to run in an HTML page"> 
	   <echo>Creates a HTML wrapper</echo>
	   <mkdir dir="${app.wrappers}"/>
	   <html-wrapper 
	       	title="Welcome to VideoLearning" 
			file="${clientapp.name}.html" 
	            application="app" 
	            swf="${clientapp.name.timestamp}" 
	            history="true" 
	            express-install="true" 
	            version-detection="true" 
	            width="100%"
	            height="100%"
	            output="${app.wrappers}"/>  
	</target> 
	
	<target name="build-client-all" description="Builds the client app">
    	<antcall target="build-video-learning-client-swf" />
	</target>
	
	    <target name="build-server" description="Builds the java server classes and puts them in a jar">
	        <delete dir="${server.tmp.classes}"/>
	        <mkdir dir="${server.tmp.classes}"/>
	        <javac encoding="utf-8" srcdir="${project.server.src}" destdir="${server.tmp.classes}">
	          <compilerarg value="-Xlint:unchecked" />
	          <classpath>
	            <pathelement path="${classpath}"/>
	            <pathelement location="${red5.dir}/red5.jar"/>
	            <fileset dir="${project.server.path}/webapp/WEB-INF/lib" includes="*.jar"/>
	          </classpath>
	        </javac>
	        <mkdir dir="${jar.dir}"/>
	        <jar destfile="${jar.file}" basedir="${server.tmp.classes}" />
	        <delete dir="${server.tmp.classes}"/>
	    </target>

		<target name="build-and-deploy-client" depends="build-client-all,deploy-client" description="Builds the client app and client modules, then copies the built files to the web app directory on the server"/>
	
		<target name="build-and-deploy-server" depends="build-server,deploy-server" description="Builds the server classes, jar them, and deploy the server jar + config to the server"/>

    		  		  
	<target name="deploy-client" description="Copies the client swf files to the web app directory on the server">
		<!-- DEPLOY CLIENT APPLICATION -->
		<!-- delete old version app -->
	   	<delete quiet="true">
			<fileset dir="${webapp.dir}" includes="${clientapp.name}*.swf"/>
		</delete>
		<!-- copy new version app -->
	    <copy todir="${webapp.dir}">
    		<fileset dir="${app.deploy}" includes="${clientapp.name}*.swf"/>
  		</copy>

	      <!-- copy wrappers -->
	      <echo>Copy wrappers</echo>
		  <copy todir="${webapp.dir}">
	        <fileset dir="${app.wrappers}" includes="**"/>
	      </copy>

	    </target>
		
		<!-- Deploy the visu server jar and clien swf files to the Red5 server -->
	    <target name="deploy-server" depends="clean-webinf-libs" description="Copies the server jar, configuration files, and dependencies to the web app directory on the server">

	      <mkdir dir="${webapp.dir}" />

	      <copy verbose="true" todir="${webapp.dir}" overwrite="true">
	        <fileset dir="${project.server.path}/webapp" />
	      </copy>
	      
	      <mkdir dir="${webapp.dir}/WEB-INF/lib" />

	      <copy  verbose="true"  file="${jar.file}" todir="${webapp.dir}/WEB-INF/lib" />
	    </target>
		
		<target name="clean-webinf-libs">
			<echo message="Removing ktbs-client jars from the server WEB-INF/lib directory"/>
			<delete quiet="true">
				<fileset dir="${webapp.dir}/WEB-INF/lib" includes="ktbs*.jar"/>
			</delete>
		</target>

	    <target name="build-and-deploy-all" depends="build-and-deploy-client,build-and-deploy-server" description="Builds the client and the server, and deploy the built files to the web app directory on the server"/>

		 <target name="clean" description="Removes the temporary deploy directory where built files are created from the filesystem">
			  <delete dir="${app.deploy}"/>
		</target>  	
		

</project>
